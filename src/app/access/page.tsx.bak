'use client';
import { useState, useEffect, useCallback } from 'react';
import { AnimatePresence, motion } from 'framer-motion';
import Head from 'next/head';
import Image from 'next/image'; // Use Next/Image for consistency and optimization
import PageEditor from '@/components/PageEditor';

// Define a more specific type for images if possible, using any[] for now based on snippet
interface AdminImage {
    _id: string;
    url: string;
    title: string;
    description: string;
    category: string;
    // Add other fields if they exist and are needed
}

export default function AccessPage() {
  const [code, setCode] = useState('');
  const [authorized, setAuthorized] = useState(false);
  const [images, setImages] = useState<AdminImage[]>([]); // Use specific type
  const [filteredAdminImages, setFilteredAdminImages] = useState<AdminImage[]>([]);
  const [adminCategories, setAdminCategories] = useState<string[]>([]);
  const [selectedAdminCategory, setSelectedAdminCategory] = useState<string>('all');
  const [editing, setEditing] = useState<AdminImage | null>(null); // Use specific type
  const [loadingImages, setLoadingImages] = useState(false);
  const [error, setError] = useState(''); // For login errors

  // --- State for Upload Form --- 
  const [uploadFiles, setUploadFiles] = useState<FileList | null>(null);
  const [uploadTitle, setUploadTitle] = useState('');
  const [uploadDescription, setUploadDescription] = useState('');
  const [uploadCategory, setUploadCategory] = useState('');
  const [isUploading, setIsUploading] = useState(false);
  const [uploadError, setUploadError] = useState('');
  // --- End Upload Form State --- 

  const [activeTab, setActiveTab] = useState<'images' | 'pages'>('images');
  const [pages, setPages] = useState<any[]>([]);
  const [loadingPages, setLoadingPages] = useState(false);
  const [editingPage, setEditingPage] = useState<string | null>(null);
  const [creatingPage, setCreatingPage] = useState(false);

  // Set focus to the code input when component loads
  useEffect(() => {
    if (!authorized) {
      const codeInput = document.getElementById('access-code-input');
      if (codeInput) {
        (codeInput as HTMLInputElement).focus();
      }
    }
  }, [authorized]);

  // Set focus to upload form when authorized
  useEffect(() => {
    if (authorized) {
      const uploadTitleInput = document.getElementById('upload-title');
      if (uploadTitleInput) {
        (uploadTitleInput as HTMLInputElement).focus();
      }
    }
  }, [authorized]);

  // Handle escape key to close modal
  useEffect(() => {
    const handleEscape = (e: KeyboardEvent) => {
      if (e.key === 'Escape' && editing) {
        setEditing(null);
      }
    };
    
    window.addEventListener('keydown', handleEscape);
    return () => window.removeEventListener('keydown', handleEscape);
  }, [editing]);

  // Function to (re)apply filters to the admin images
  const applyAdminFilters = useCallback((sourceImages: AdminImage[], category: string) => {
    if (category === 'all') {
      setFilteredAdminImages(sourceImages);
    } else {
      setFilteredAdminImages(sourceImages.filter(img => img.category === category));
    }
  }, []);

  const fetchAdminImages = async () => {
    setLoadingImages(true);
    try {
      const imgsRes = await fetch('/api/images');
      if (!imgsRes.ok) throw new Error('Failed to fetch images for admin');
      const imgs = await imgsRes.json();
      setImages(imgs);
      applyAdminFilters(imgs, selectedAdminCategory); // Apply current filter
      const uniqueCategories = Array.from(new Set(imgs.map((img: AdminImage) => img.category))) as string[];
      setAdminCategories(uniqueCategories);
    } catch (err) {
      console.error("Fetch admin images error:", err);
      setError('Could not load images.'); // Set an error to display to user
    } finally {
      setLoadingImages(false);
    }
  };

  const fetchPages = async () => {
    setLoadingPages(true);
    try {
      const pagesRes = await fetch('/api/pages');
      if (!pagesRes.ok) throw new Error('Failed to fetch pages for admin');
      const pagesData = await pagesRes.json();
      setPages(pagesData);
    } catch (err) {
      console.error("Fetch admin pages error:", err);
      setError('Could not load pages.'); 
    } finally {
      setLoadingPages(false);
    }
  };

  const fetchAdminData = async () => {
    await Promise.all([
      fetchAdminImages(),
      fetchPages()
    ]);
  };

  const verify = async (e: React.FormEvent) => {
    e.preventDefault();
    setError(''); // Clear previous errors
    setIsUploading(false); // Reset upload state on re-verify attempt
    setUploadError('');
    try {
      const res = await fetch('/api/verify', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ code }),
      });
      if (res.ok) {
        setAuthorized(true);
        await fetchAdminData(); // Fetch all admin data after authorization
      } else {
        const errorData = await res.json().catch(() => ({})); // Try to get error message
        setError(errorData.error || 'Invalid code');
      }
    } catch (err: any) {
        console.error("Verification error:", err);
        setError('An error occurred. Please try again.');
    }
  };

  const handleAdminCategoryChange = (category: string) => {
    setSelectedAdminCategory(category);
    applyAdminFilters(images, category);
  };

  const shuffleAdminImages = () => {
    const shuffled = [...filteredAdminImages].sort(() => Math.random() - 0.5);
    setFilteredAdminImages(shuffled);
  };

  const handleDelete = async (id: string) => {
    if (!confirm('Are you sure you want to delete this image?')) return;
    try {
        // Assumes DELETE API checks auth cookie internally
        const res = await fetch(`/api/images/${id}`, { method: 'DELETE' });
        if (!res.ok) {
            const errorData = await res.json().catch(() => ({}));
            throw new Error(errorData.error || 'Failed to delete');
        }
        const newImages = images.filter(img => img._id !== id);
        setImages(newImages);
        applyAdminFilters(newImages, selectedAdminCategory);
        
        // Announce deletion to screen readers
        const statusEl = document.getElementById('status-message');
        if (statusEl) {
          statusEl.textContent = 'Image deleted successfully';
          setTimeout(() => {
            statusEl.textContent = '';
          }, 3000);
        }
    } catch (err: any) {
        console.error("Delete error:", err);
        alert(`Error deleting image: ${err.message}`); // Simple alert for now
    }
  };

  const handleSave = async (data: { title: string, description: string, category: string }) => {
    if (!editing) return;
    try {
        // Assumes PUT API checks auth cookie internally
        const res = await fetch(`/api/images/${editing._id}`, {
            method: 'PUT',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(data),
        });
        if (!res.ok) {
            const errorData = await res.json().catch(() => ({}));
            throw new Error(errorData.error || 'Failed to update');
        }
        const updatedImage = await res.json();
        const newImages = images.map(img => img._id === updatedImage._id ? updatedImage : img);
        setImages(newImages);
        applyAdminFilters(newImages, selectedAdminCategory);
        setEditing(null);
        
        // Announce update to screen readers
        const statusEl = document.getElementById('status-message');
        if (statusEl) {
          statusEl.textContent = 'Image updated successfully';
          setTimeout(() => {
            statusEl.textContent = '';
          }, 3000);
        }
    } catch (err: any) {
        console.error("Update error:", err);
        alert(`Error updating image: ${err.message}`); // Simple alert for now
    }
  };

  // --- Upload Form Handler --- 
  const handleUploadSubmit = async (e: React.FormEvent) => {
      e.preventDefault();
      if (!uploadFiles || uploadFiles.length === 0) {
        setUploadError('Please select at least one image file.');
        return;
      }
      setUploadError('');
      setIsUploading(true);

      const formData = new FormData();
      // Add all files to form data
      for (let i = 0; i < uploadFiles.length; i++) {
        formData.append('file', uploadFiles[i]);
      }
      formData.append('title', uploadTitle);
      formData.append('description', uploadDescription);
      formData.append('category', uploadCategory);

      try {
          const res = await fetch('/api/images', {
              method: 'POST',
              body: formData,
          });

          if (res.ok) {
              const responseData = await res.json();
              // Handle both single and multiple image upload responses
              const newImages = responseData.images 
                ? [...responseData.images, ...images] 
                : [responseData, ...images];
              setImages(newImages);
              applyAdminFilters(newImages, selectedAdminCategory);
              
              setUploadFiles(null);
              setUploadTitle('');
              setUploadDescription('');
              setUploadCategory('');
              const fileInput = document.getElementById('file-upload') as HTMLInputElement;
              if(fileInput) fileInput.value = ""; 
              
              // Announce upload to screen readers
              const statusEl = document.getElementById('status-message');
              if (statusEl) {
                const count = responseData.images ? responseData.images.length : 1;
                statusEl.textContent = `${count} image${count > 1 ? 's' : ''} uploaded successfully`;
                setTimeout(() => {
                  statusEl.textContent = '';
                }, 3000);
              }
          } else {
              const errorData = await res.json().catch(() => ({}));
              throw new Error(errorData.error || 'Upload failed');
          }
      } catch (err: any) {
          console.error("Upload error:", err);
          setUploadError(err.message || 'Upload failed. Please try again.');
      } finally {
          setIsUploading(false);
      }
  };

  // Delete a page
  const handleDeletePage = async (slug: string) => {
    if (!confirm('Are you sure you want to delete this page?')) return;
    try {
      const res = await fetch(`/api/pages?slug=${slug}`, { method: 'DELETE' });
      if (!res.ok) {
        const errorData = await res.json().catch(() => ({}));
        throw new Error(errorData.error || 'Failed to delete page');
      }
      const newPages = pages.filter(page => page.slug !== slug);
      setPages(newPages);
      
      // Announce deletion to screen readers
      const statusEl = document.getElementById('status-message');
      if (statusEl) {
        statusEl.textContent = 'Page deleted successfully';
        setTimeout(() => {
          statusEl.textContent = '';
        }, 3000);
      }
    } catch (err: any) {
      console.error("Delete page error:", err);
      alert(`Error deleting page: ${err.message}`);
    }
  };

  // Close the page editor and refresh pages
  const handlePageEditorClose = async () => {
    setEditingPage(null);
    setCreatingPage(false);
    await fetchPages();
  };

  // Render Access Code Form if not authorized
  if (!authorized) {
    return (
      <div 
        style={{ maxWidth: "400px", margin: "80px auto 0", padding: "24px", backgroundColor: "white", borderRadius: "4px", boxShadow: "0 1px 3px rgba(0,0,0,0.12)" }}
        role="main"
        aria-labelledby="access-title"
      >
        <h1 
          id="access-title"
          style={{ fontSize: "20px", fontWeight: "700", marginBottom: "16px" }}
        >
          Enter Access Code
        </h1>
        <form 
          onSubmit={verify} 
          style={{ display: "flex", flexDirection: "column", gap: "16px" }}
          aria-label="Access verification form"
        >
          <div>
            <label 
              htmlFor="access-code-input" 
              style={{ 
                display: "block", 
                marginBottom: "4px", 
                fontSize: "14px", 
                fontWeight: "500" 
              }}
            >
              Access Code
            </label>
            <input 
              id="access-code-input"
              type="password" 
              value={code} 
              onChange={e => setCode(e.target.value)} 
              placeholder="Enter code"
              style={{ 
                width: "100%", 
                padding: "8px 12px", 
                border: "1px solid #e2e8f0", 
                borderRadius: "4px",
                fontSize: "14px"
              }}
              required 
              aria-required="true"
              aria-invalid={error ? "true" : "false"}
              aria-describedby={error ? "error-message" : undefined}
            />
            {error && (
              <p 
                id="error-message"
                style={{ color: "#e53e3e", fontSize: "14px", marginTop: "4px" }}
                role="alert"
              >
                {error}
              </p>
            )} 
          </div>
          <button 
            type="submit"
            style={{
              width: "100%",
              padding: "8px 12px",
              backgroundColor: "#0070f3",
              color: "white",
              border: "none",
              borderRadius: "4px",
              fontSize: "14px",
              fontWeight: "500",
              cursor: "pointer"
            }}
          >
            Submit
          </button>
        </form>
      </div>
    );
  }

  // Render Admin Gallery and Upload Form if authorized
  return (
    <>
      <Head>
        <title>Admin Dashboard - Image Gallery</title>
      </Head>
      
      <div 
        style={{ maxWidth: "1200px", margin: "0 auto", padding: "32px 16px" }}
        role="main"
        aria-labelledby="admin-title"
      >
        <a
          href="/"
          style={{
            display: 'inline-block',
            marginBottom: '20px',
            padding: '8px 16px',
            backgroundColor: '#2563EB',
            color: 'white',
            borderRadius: '4px',
            textDecoration: 'none',
            fontWeight: 500,
            fontSize: '15px',
            boxShadow: '0 1px 2px rgba(0,0,0,0.05)',
            transition: 'background 0.2s',
          }}
          onMouseOver={e => e.currentTarget.style.backgroundColor = '#1e40af'}
          onMouseOut={e => e.currentTarget.style.backgroundColor = '#2563EB'}
        >
          ← Back to Gallery
        </a>
        <h1 
          id="admin-title"
          style={{ fontSize: "28px", fontWeight: "700", color: "#111827", marginBottom: "24px" }}
        >
          Admin Area
        </h1>

        {/* Tabs for switching between Images and Pages management */}
        <div 
          style={{ 
            display: 'flex', 
            borderBottom: '1px solid #e5e7eb', 
            marginBottom: '24px' 
          }}
        >
          <button
            onClick={() => setActiveTab('images')}
            style={{
              padding: '12px 24px',
              backgroundColor: activeTab === 'images' ? '#f3f4f6' : 'transparent',
              borderBottom: activeTab === 'images' ? '2px solid #2563EB' : 'none',
              border: 'none',
              fontWeight: activeTab === 'images' ? '600' : '400',
              fontSize: '16px',
              cursor: 'pointer'
            }}
            aria-selected={activeTab === 'images'}
            role="tab"
          >
            Manage Images
          </button>
          <button
            onClick={() => setActiveTab('pages')}
            style={{
              padding: '12px 24px',
              backgroundColor: activeTab === 'pages' ? '#f3f4f6' : 'transparent',
              borderBottom: activeTab === 'pages' ? '2px solid #2563EB' : 'none',
              border: 'none',
              fontWeight: activeTab === 'pages' ? '600' : '400',
              fontSize: '16px',
              cursor: 'pointer'
            }}
            aria-selected={activeTab === 'pages'}
            role="tab"
          >
            Manage Pages
          </button>
        </div>

        {/* Visually hidden status message for screen readers */}
        <div 
          id="status-message" 
          aria-live="polite" 
          style={{ 
            position: 'absolute', 
            width: '1px', 
            height: '1px', 
            padding: '0', 
            margin: '-1px', 
            overflow: 'hidden', 
            clip: 'rect(0, 0, 0, 0)', 
            whiteSpace: 'nowrap', 
            borderWidth: '0' 
          }}
        ></div>

        {activeTab === 'images' ? (
          // Images Management UI
          <>
            {/* Upload Form Section */} 
            <div 
              style={{ marginBottom: "40px", padding: "24px", backgroundColor: "white", borderRadius: "8px", boxShadow: "0 1px 3px rgba(0,0,0,0.12)" }}
              role="region"
              aria-labelledby="upload-title"
            >
              <h2 
                id="upload-title"
                style={{ fontSize: "20px", fontWeight: "600", marginBottom: "16px" }}
              >
                Upload Images
              </h2>
              {uploadError && (
                <div 
                  style={{ marginBottom: "16px", padding: "12px", backgroundColor: "#FEE2E2", color: "#B91C1C", borderRadius: "4px", fontSize: "14px" }}
                  role="alert"
                >
                  {uploadError}
                </div>
              )}
              <form 
                onSubmit={handleUploadSubmit} 
                style={{ display: "flex", flexDirection: "column", gap: "16px" }}
                aria-label="Upload new image form"
              >
                <div>
                  <label 
                    htmlFor="file-upload" 
                    style={{ display: "block", fontSize: "14px", fontWeight: "500", color: "#374151", marginBottom: "4px" }}
                  >
                    Image Files
                  </label>
                  <input
                    id="file-upload"
                    type="file"
                    accept="image/*"
                    multiple
                    required
                    onChange={(e) => setUploadFiles(e.target.files)}
                    style={{ width: "100%", padding: "8px 12px", border: "1px solid #e2e8f0", borderRadius: "4px" }}
                    aria-required="true"
                  />
                  <p style={{ marginTop: "4px", fontSize: "12px", color: "#6B7280" }}>
                    Select multiple files by holding Ctrl (or Cmd on Mac) while selecting
                  </p>
                </div>
                <div>
                  <label 
                    htmlFor="upload-title" 
                    style={{ display: "block", fontSize: "14px", fontWeight: "500", color: "#374151", marginBottom: "4px" }}
                  >
                    Title (common for all images)
                  </label>
                  <input
                    id="upload-title"
                    type="text"
                    name="title"
                    placeholder="Image Title"
                    required
                    value={uploadTitle}
                    onChange={(e) => setUploadTitle(e.target.value)}
                    style={{ width: "100%", padding: "8px 12px", border: "1px solid #e2e8f0", borderRadius: "4px" }}
                    aria-required="true"
                  />
                  <p style={{ marginTop: "4px", fontSize: "12px", color: "#6B7280" }}>
                    For multiple uploads, each image will be numbered
                  </p>
                </div>
                <div>
                  <label 
                    htmlFor="upload-description" 
                    style={{ display: "block", fontSize: "14px", fontWeight: "500", color: "#374151", marginBottom: "4px" }}
                  >
                    Description (shared for all images)
                  </label>
                  <textarea
                    id="upload-description"
                    name="description"
                    placeholder="Image Description"
                    rows={3}
                    required
                    value={uploadDescription}
                    onChange={(e) => setUploadDescription(e.target.value)}
                    style={{ width: "100%", padding: "8px 12px", border: "1px solid #e2e8f0", borderRadius: "4px" }}
                    aria-required="true"
                  />
                </div>
                <div>
                  <label 
                    htmlFor="upload-category" 
                    style={{ display: "block", fontSize: "14px", fontWeight: "500", color: "#374151", marginBottom: "4px" }}
                  >
                    Category (shared for all images)
                  </label>
                  <input
                    id="upload-category"
                    type="text"
                    name="category"
                    placeholder="Category (e.g., Nature, Art)"
                    required
                    value={uploadCategory}
                    onChange={(e) => setUploadCategory(e.target.value)}
                    style={{ width: "100%", padding: "8px 12px", border: "1px solid #e2e8f0", borderRadius: "4px" }}
                    aria-required="true"
                  />
                </div>
                <button
                  type="submit"
                  disabled={isUploading}
                  aria-busy={isUploading}
                  style={{
                    width: "100%",
                    padding: "10px",
                    border: "none",
                    borderRadius: "4px",
                    boxShadow: "0 1px 2px rgba(0,0,0,0.05)",
                    fontSize: "14px",
                    fontWeight: "500",
                    color: "white",
                    backgroundColor: isUploading ? "#9CA3AF" : "#2563EB",
                    cursor: isUploading ? "not-allowed" : "pointer",
                    marginTop: "8px"
                  }}
                >
                  {isUploading ? 'Uploading...' : 'Upload Images'}
                </button>
              </form>
            </div>

            <div 
              role="region" 
              aria-labelledby="manage-title"
            >
              <h2 
                id="manage-title"
                style={{ fontSize: "24px", fontWeight: "600", color: "#1F2937", marginBottom: "24px" }}
              >
                Manage Images
              </h2>
              {loadingImages ? (
                <div 
                  style={{ textAlign: "center", padding: "40px" }}
                  role="status"
                  aria-live="polite"
                >
                  Loading images...
                </div>
              ) : images.length === 0 ? (
                <div 
                  style={{ textAlign: "center", padding: "40px", color: "#6B7280" }}
                  aria-live="polite"
                >
                  No images found. Upload one above!
                </div>
              ): (
                <div 
                  style={{ 
                    display: "grid", 
                    gridTemplateColumns: "repeat(auto-fill, minmax(250px, 1fr))", 
                    gap: "16px" 
                  }}
                  role="grid"
                  aria-label="Image gallery management grid"
                >
                  <AnimatePresence>
                    {images.map(img => (
                      <motion.div 
                        key={img._id} 
                        layout 
                        initial={{ opacity: 0, scale: 0.8 }}
                        animate={{ opacity: 1, scale: 1 }}
                        exit={{ opacity: 0, scale: 0.8 }}
                        transition={{ duration: 0.3 }}
                        style={{ 
                          position: "relative", 
                          borderRadius: "4px", 
                          overflow: "hidden", 
                          boxShadow: "0 1px 3px rgba(0,0,0,0.12)", 
                          aspectRatio: "16/9" 
                        }}
                        role="gridcell"
                        tabIndex={0}
                        aria-label={`Image: ${img.title}`}
                      >
                        <img 
                          src={img.url} 
                          alt={img.title} 
                          style={{ 
                            width: "100%", 
                            height: "100%", 
                            objectFit: "cover" 
                          }} 
                        />
                        <div 
                          style={{ 
                            position: "absolute", 
                            inset: 0, 
                            background: "linear-gradient(to top, rgba(0,0,0,0.7), transparent)", 
                            opacity: 0, 
                            transition: "opacity 300ms", 
                            padding: "16px", 
                            display: "flex", 
                            flexDirection: "column", 
                            justifyContent: "flex-end", 
                            color: "white" 
                          }}
                          onMouseEnter={e => e.currentTarget.style.opacity = "1"}
                          onMouseLeave={e => e.currentTarget.style.opacity = "0"}
                          onFocus={e => e.currentTarget.style.opacity = "1"}
                          onBlur={e => e.currentTarget.style.opacity = "0"}
                        >
                          <div>
                            <h3 style={{ fontWeight: "700", fontSize: "16px", overflow: "hidden", textOverflow: "ellipsis", whiteSpace: "nowrap" }}>{img.title}</h3>
                            <p style={{ fontSize: "14px", marginBottom: "8px", overflow: "hidden", textOverflow: "ellipsis", whiteSpace: "nowrap" }}>{img.description}</p>
                            <div style={{ display: "flex", gap: "8px", justifyContent: "flex-end" }}>
                              <button 
                                onClick={() => setEditing(img)} 
                                style={{ 
                                  padding: "4px 8px", 
                                  fontSize: "12px", 
                                  backgroundColor: "#F59E0B", 
                                  color: "white", 
                                  borderRadius: "4px", 
                                  border: "none", 
                                  cursor: "pointer" 
                                }}
                                aria-label={`Edit ${img.title}`}
                              >
                                Edit
                              </button>
                              <button 
                                onClick={() => handleDelete(img._id)} 
                                style={{ 
                                  padding: "4px 8px", 
                                  fontSize: "12px", 
                                  backgroundColor: "#DC2626", 
                                  color: "white", 
                                  borderRadius: "4px", 
                                  border: "none", 
                                  cursor: "pointer" 
                                }}
                                aria-label={`Delete ${img.title}`}
                              >
                                Delete
                              </button>
                            </div>
                          </div>
                        </div>
                      </motion.div>
                    ))}
                  </AnimatePresence>
                </div>
              )}
            </div>

            {/* Edit Modal */} 
            {editing && (
              <div 
                style={{ 
                  position: "fixed", 
                  inset: 0, 
                  backgroundColor: "rgba(0,0,0,0.6)", 
                  display: "flex", 
                  alignItems: "center", 
                  justifyContent: "center", 
                  zIndex: 50, 
                  padding: "16px" 
                }}
                role="dialog"
                aria-labelledby="edit-modal-title"
                aria-modal="true"
              >
                <motion.div 
                  initial={{ opacity: 0, y: -30 }}
                  animate={{ opacity: 1, y: 0 }}
                  exit={{ opacity: 0, y: -30 }}
                  style={{ 
                    backgroundColor: "white", 
                    padding: "24px", 
                    borderRadius: "8px", 
                    boxShadow: "0 4px 6px rgba(0,0,0,0.1)", 
                    width: "100%", 
                    maxWidth: "500px" 
                  }}
                >
                  <h2 
                    id="edit-modal-title"
                    style={{ fontSize: "20px", fontWeight: "600", marginBottom: "16px" }}
                  >
                    Edit Image
                  </h2>
                  <form 
                    onSubmit={e => {
                      e.preventDefault();
                      const target = e.target as typeof e.target & {
                        title: { value: string };
                        description: { value: string };
                        category: { value: string };
                      };
                      handleSave({
                        title: target.title.value,
                        description: target.description.value,
                        category: target.category.value,
                      });
                    }} 
                    style={{ display: "flex", flexDirection: "column", gap: "16px" }}
                    aria-label="Edit image form"
                  >
                    <div>
                      <label 
                        htmlFor="title" 
                        style={{ display: "block", fontSize: "14px", fontWeight: "500", color: "#374151", marginBottom: "4px" }}
                      >
                        Title
                      </label>
                      <input 
                        id="title"
                        name="title" 
                        defaultValue={editing.title} 
                        required
                        style={{ width: "100%", padding: "8px 12px", border: "1px solid #e2e8f0", borderRadius: "4px" }}
                        aria-required="true"
                      />
                    </div>
                    <div>
                      <label 
                        htmlFor="description" 
                        style={{ display: "block", fontSize: "14px", fontWeight: "500", color: "#374151", marginBottom: "4px" }}
                      >
                        Description
                      </label>
                      <textarea 
                        id="description"
                        name="description" 
                        defaultValue={editing.description} 
                        rows={3} 
                        required
                        style={{ width: "100%", padding: "8px 12px", border: "1px solid #e2e8f0", borderRadius: "4px" }}
                        aria-required="true"
                      />
                    </div>
                    <div>
                      <label 
                        htmlFor="category" 
                        style={{ display: "block", fontSize: "14px", fontWeight: "500", color: "#374151", marginBottom: "4px" }}
                      >
                        Category
                      </label>
                      <select
                        id="category"
                        name="category"
                        defaultValue={editing.category}
                        required
                        style={{ width: "100%", padding: "8px 12px", border: "1px solid #e2e8f0", borderRadius: "4px" }}
                        aria-required="true"
        {/* Upload Form Section */} 
        <div 
          style={{ marginBottom: "40px", padding: "24px", backgroundColor: "white", borderRadius: "8px", boxShadow: "0 1px 3px rgba(0,0,0,0.12)" }}
          role="region"
          aria-labelledby="upload-title"
        >
          <h2 
            id="upload-title"
            style={{ fontSize: "20px", fontWeight: "600", marginBottom: "16px" }}
          >
            Upload Images
          </h2>
          {uploadError && (
            <div 
              style={{ marginBottom: "16px", padding: "12px", backgroundColor: "#FEE2E2", color: "#B91C1C", borderRadius: "4px", fontSize: "14px" }}
              role="alert"
            >
              {uploadError}
            </div>
          )}
          <form 
            onSubmit={handleUploadSubmit} 
            style={{ display: "flex", flexDirection: "column", gap: "16px" }}
            aria-label="Upload new image form"
          >
            <div>
              <label 
                htmlFor="file-upload" 
                style={{ display: "block", fontSize: "14px", fontWeight: "500", color: "#374151", marginBottom: "4px" }}
              >
                Image Files
              </label>
              <input
                id="file-upload"
                type="file"
                accept="image/*"
                multiple
                required
                onChange={(e) => setUploadFiles(e.target.files)}
                style={{ width: "100%", padding: "8px 12px", border: "1px solid #e2e8f0", borderRadius: "4px" }}
                aria-required="true"
              />
              <p style={{ marginTop: "4px", fontSize: "12px", color: "#6B7280" }}>
                Select multiple files by holding Ctrl (or Cmd on Mac) while selecting
              </p>
            </div>
            <div>
              <label 
                htmlFor="upload-title" 
                style={{ display: "block", fontSize: "14px", fontWeight: "500", color: "#374151", marginBottom: "4px" }}
              >
                Title (common for all images)
              </label>
              <input
                id="upload-title"
                type="text"
                name="title"
                placeholder="Image Title"
                required
                value={uploadTitle}
                onChange={(e) => setUploadTitle(e.target.value)}
                style={{ width: "100%", padding: "8px 12px", border: "1px solid #e2e8f0", borderRadius: "4px" }}
                aria-required="true"
              />
              <p style={{ marginTop: "4px", fontSize: "12px", color: "#6B7280" }}>
                For multiple uploads, each image will be numbered
              </p>
            </div>
            <div>
              <label 
                htmlFor="upload-description" 
                style={{ display: "block", fontSize: "14px", fontWeight: "500", color: "#374151", marginBottom: "4px" }}
              >
                Description (shared for all images)
              </label>
              <textarea
                id="upload-description"
                name="description"
                placeholder="Image Description"
                rows={3}
                required
                value={uploadDescription}
                onChange={(e) => setUploadDescription(e.target.value)}
                style={{ width: "100%", padding: "8px 12px", border: "1px solid #e2e8f0", borderRadius: "4px" }}
                aria-required="true"
              />
            </div>
            <div>
              <label 
                htmlFor="upload-category" 
                style={{ display: "block", fontSize: "14px", fontWeight: "500", color: "#374151", marginBottom: "4px" }}
              >
                Category (shared for all images)
              </label>
              <input
                id="upload-category"
                type="text"
                name="category"
                placeholder="Category (e.g., Nature, Art)"
                required
                value={uploadCategory}
                onChange={(e) => setUploadCategory(e.target.value)}
                style={{ width: "100%", padding: "8px 12px", border: "1px solid #e2e8f0", borderRadius: "4px" }}
                aria-required="true"
              />
            </div>
            <button
              type="submit"
              disabled={isUploading}
              aria-busy={isUploading}
              style={{
                width: "100%",
                padding: "10px",
                border: "none",
                borderRadius: "4px",
                boxShadow: "0 1px 2px rgba(0,0,0,0.05)",
                fontSize: "14px",
                fontWeight: "500",
                color: "white",
                backgroundColor: isUploading ? "#9CA3AF" : "#2563EB",
                cursor: isUploading ? "not-allowed" : "pointer",
                marginTop: "8px"
              }}
            >
              {isUploading ? 'Uploading...' : 'Upload Images'}
            </button>
          </form>
        </div>

        <div 
          role="region" 
          aria-labelledby="manage-title"
        >
          <h2 
            id="manage-title"
            style={{ fontSize: "24px", fontWeight: "600", color: "#1F2937", marginBottom: "24px" }}
          >
            Manage Images
          </h2>
          {loadingImages ? (
            <div 
              style={{ textAlign: "center", padding: "40px" }}
              role="status"
              aria-live="polite"
            >
              Loading images...
            </div>
          ) : images.length === 0 ? (
            <div 
              style={{ textAlign: "center", padding: "40px", color: "#6B7280" }}
              aria-live="polite"
            >
              No images found. Upload one above!
            </div>
          ): (
            <div 
              style={{ 
                display: "grid", 
                gridTemplateColumns: "repeat(auto-fill, minmax(250px, 1fr))", 
                gap: "16px" 
              }}
              role="grid"
              aria-label="Image gallery management grid"
            >
              <AnimatePresence>
                {images.map(img => (
                  <motion.div 
                    key={img._id} 
                    layout 
                    initial={{ opacity: 0, scale: 0.8 }}
                    animate={{ opacity: 1, scale: 1 }}
                    exit={{ opacity: 0, scale: 0.8 }}
                    transition={{ duration: 0.3 }}
                    style={{ 
                      position: "relative", 
                      borderRadius: "4px", 
                      overflow: "hidden", 
                      boxShadow: "0 1px 3px rgba(0,0,0,0.12)", 
                      aspectRatio: "16/9" 
                    }}
                    role="gridcell"
                    tabIndex={0}
                    aria-label={`Image: ${img.title}`}
                  >
                    <img 
                      src={img.url} 
                      alt={img.title} 
                      style={{ 
                        width: "100%", 
                        height: "100%", 
                        objectFit: "cover" 
                      }} 
                    />
                    <div 
                      style={{ 
                        position: "absolute", 
                        inset: 0, 
                        background: "linear-gradient(to top, rgba(0,0,0,0.7), transparent)", 
                        opacity: 0, 
                        transition: "opacity 300ms", 
                        padding: "16px", 
                        display: "flex", 
                        flexDirection: "column", 
                        justifyContent: "flex-end", 
                        color: "white" 
                      }}
                      onMouseEnter={e => e.currentTarget.style.opacity = "1"}
                      onMouseLeave={e => e.currentTarget.style.opacity = "0"}
                      onFocus={e => e.currentTarget.style.opacity = "1"}
                      onBlur={e => e.currentTarget.style.opacity = "0"}
                    >
                      <div>
                        <h3 style={{ fontWeight: "700", fontSize: "16px", overflow: "hidden", textOverflow: "ellipsis", whiteSpace: "nowrap" }}>{img.title}</h3>
                        <p style={{ fontSize: "14px", marginBottom: "8px", overflow: "hidden", textOverflow: "ellipsis", whiteSpace: "nowrap" }}>{img.description}</p>
                        <div style={{ display: "flex", gap: "8px", justifyContent: "flex-end" }}>
                          <button 
                            onClick={() => setEditing(img)} 
                            style={{ 
                              padding: "4px 8px", 
                              fontSize: "12px", 
                              backgroundColor: "#F59E0B", 
                              color: "white", 
                              borderRadius: "4px", 
                              border: "none", 
                              cursor: "pointer" 
                            }}
                            aria-label={`Edit ${img.title}`}
                          >
                            Edit
                          </button>
                          <button 
                            onClick={() => handleDelete(img._id)} 
                            style={{ 
                              padding: "4px 8px", 
                              fontSize: "12px", 
                              backgroundColor: "#DC2626", 
                              color: "white", 
                              borderRadius: "4px", 
                              border: "none", 
                              cursor: "pointer" 
                            }}
                            aria-label={`Delete ${img.title}`}
                          >
                            Delete
                          </button>
                        </div>
                      </div>
                    </div>
                  </motion.div>
                ))}
              </AnimatePresence>
            </div>
          )}
        </div>

        {/* Edit Modal */} 
        {editing && (
          <div 
            style={{ 
              position: "fixed", 
              inset: 0, 
              backgroundColor: "rgba(0,0,0,0.6)", 
              display: "flex", 
              alignItems: "center", 
              justifyContent: "center", 
              zIndex: 50, 
              padding: "16px" 
            }}
            role="dialog"
            aria-labelledby="edit-modal-title"
            aria-modal="true"
          >
            <motion.div 
              initial={{ opacity: 0, y: -30 }}
              animate={{ opacity: 1, y: 0 }}
              exit={{ opacity: 0, y: -30 }}
              style={{ 
                backgroundColor: "white", 
                padding: "24px", 
                borderRadius: "8px", 
                boxShadow: "0 4px 6px rgba(0,0,0,0.1)", 
                width: "100%", 
                maxWidth: "500px" 
              }}
            >
              <h2 
                id="edit-modal-title"
                style={{ fontSize: "20px", fontWeight: "600", marginBottom: "16px" }}
              >
                Edit Image
              </h2>
              <form 
                onSubmit={e => {
                  e.preventDefault();
                  const target = e.target as typeof e.target & {
                    title: { value: string };
                    description: { value: string };
                    category: { value: string };
                  };
                  handleSave({
                    title: target.title.value,
                    description: target.description.value,
                    category: target.category.value,
                  });
                }} 
                style={{ display: "flex", flexDirection: "column", gap: "16px" }}
                aria-label="Edit image form"
              >
                <div>
                  <label 
                    htmlFor="title" 
                    style={{ display: "block", fontSize: "14px", fontWeight: "500", color: "#374151", marginBottom: "4px" }}
                  >
                    Title
                  </label>
                  <input 
                    id="title"
                    name="title" 
                    defaultValue={editing.title} 
                    required
                    style={{ width: "100%", padding: "8px 12px", border: "1px solid #e2e8f0", borderRadius: "4px" }}
                    aria-required="true"
                  />
                </div>
                <div>
                  <label 
                    htmlFor="description" 
                    style={{ display: "block", fontSize: "14px", fontWeight: "500", color: "#374151", marginBottom: "4px" }}
                  >
                    Description
                  </label>
                  <textarea 
                    id="description"
                    name="description" 
                    defaultValue={editing.description} 
                    rows={3} 
                    required
                    style={{ width: "100%", padding: "8px 12px", border: "1px solid #e2e8f0", borderRadius: "4px" }}
                    aria-required="true"
                  />
                </div>
                <div>
                  <label 
                    htmlFor="category" 
                    style={{ display: "block", fontSize: "14px", fontWeight: "500", color: "#374151", marginBottom: "4px" }}
                  >
                    Category
                  </label>
                  <select
                    id="category"
                    name="category"
                    defaultValue={editing.category}
                    required
                    style={{ width: "100%", padding: "8px 12px", border: "1px solid #e2e8f0", borderRadius: "4px" }}
                    aria-required="true"
                  >
                    <option value="Nature">Nature</option>
                    <option value="Architecture">Architecture</option>
                    <option value="People">People</option>
                    <option value="Art">Art</option>
                    <option value="Other">Other</option>
                  </select>
                </div>
                <div style={{ display: "flex", justifyContent: "flex-end", gap: "12px", paddingTop: "16px" }}>
                  <button 
                    type="button" 
                    onClick={() => setEditing(null)} 
                    style={{ 
                      padding: "8px 16px", 
                      borderRadius: "4px", 
                      border: "1px solid #e2e8f0", 
                      color: "#4B5563", 
                      backgroundColor: "white", 
                      cursor: "pointer" 
                    }}
                  >
                    Cancel
                  </button>
                  <button 
                    type="submit"
                    style={{ 
                      padding: "8px 16px", 
                      backgroundColor: "#0070f3", 
                      color: "white", 
                      borderRadius: "4px", 
                      border: "none", 
                      cursor: "pointer" 
                    }}
                  >
                    Save
                  </button>
                </div>
              </form>
            </motion.div>
          </div>
        )}
      </div>
    </>
  );
} 